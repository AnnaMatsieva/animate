{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Requests","className","icon","faAngleDown","App","href","faAngleRight","faPlus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAOA,SAASA,IACP,OACE,6BACE,uBAAGC,UAAU,kBAAiB,0BAAMA,UAAU,uBAAhB,QAA9B,aAAyF,0BAAMA,UAAU,qBAAhB,iBACzF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,wBAAf,QAGJ,wBAAIA,UAAU,iBACZ,wBAAIA,UAAU,qCACZ,4BACE,wBAAIA,UAAU,eAAd,KACA,wBAAIA,UAAU,uBACZ,wBAAIA,UAAU,cAAd,YACA,wBAAIA,UAAU,iBAAgB,0BAAMA,UAAU,uBAAhB,KAA9B,yBAIN,wBAAIA,UAAU,wCACd,4BACI,wBAAIA,UAAU,eAAd,MACA,wBAAIA,UAAU,uBACZ,wBAAIA,UAAU,cAAd,gBACA,wBAAIA,UAAU,iBAAgB,0BAAMA,UAAU,uBAAhB,KAA9B,2BAMV,yBAAKA,UAAU,cACb,4BAAQA,UAAU,cAAa,0BAAMA,UAAU,uBAAhB,WAA/B,yBAAyG,kBAAC,IAAD,CAAiBA,UAAU,OAAOC,KAAMC,OACjJ,yBAAKF,UAAU,gBAAf,uBAoCOG,MA9Bf,WACE,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,aACb,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,sBACZ,4BAAI,uBAAGA,UAAU,oBAAoBI,KAAK,KAAtC,iBACJ,kBAAC,IAAD,CAAiBJ,UAAU,OAAOC,KAAMI,MACxC,4BAAI,uBAAGL,UAAU,oBAAoBI,KAAK,KAAtC,uBAEN,4BAAQJ,UAAU,4BAAlB,0BAAoE,kBAAC,IAAD,CAAiBA,UAAU,OAAOC,KAAMK,QAE9G,yBAAKN,UAAU,YACb,yBAAKA,UAAU,gCACb,kBAACD,EAAD,OAEF,yBAAKC,UAAU,iCACb,kBAACD,EAAD,QAGJ,yBAAKC,UAAU,gBACb,4BAAQA,UAAU,4BAAlB,iBAA2D,kBAAC,IAAD,CAAiBA,UAAU,OAAOC,KAAMI,YCzD3FE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCuBNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eb4d90f0.chunk.js","sourcesContent":["import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { ArcGauge } from '@progress/kendo-react-gauges';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleRight, faPlus, faAngleDown } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss';\n\nfunction Requests() {\n  return (\n    <div>\n      <p className=\"requests-title\"><span className=\"highlighted-concept\">Open</span> Requests <span className=\"dependent-concept\">last 90 days</span></p>\n      <div className=\"legend-position\">\n        <div className=\"gauge percentage\">\n          <div className=\"meter\"></div>\n          <div className=\"percentage-container\">\n            <div className=\"percentage-indicator\">14</div>\n          </div>\n        </div>\n        <ul className=\"graph-legends\">\n          <li className=\"graph-critical graph-legends-item\">\n            <ul>\n              <li className=\"graph-point\">4</li>\n              <ul className=\"graph-clarification\">\n                <li className=\"graph-info\">Critical</li>\n                <li className=\"graph-matches\"><span className=\"highlighted-concept\">3</span> machines impacted</li>\n              </ul>\n            </ul>\n          </li>\n          <li className=\"graph-noncritical graph-legends-item\">\n          <ul>\n              <li className=\"graph-point\">10</li>\n              <ul className=\"graph-clarification\">\n                <li className=\"graph-info\">Non-critical</li>\n                <li className=\"graph-matches\"><span className=\"highlighted-concept\">8</span> machines impacted</li>\n              </ul>\n            </ul>\n          </li>              \n        </ul>\n      </div>\n      <div className=\"tab--block\">\n        <button className=\"tab-button\"><span className=\"highlighted-concept\">Show me</span> oldest open requests <FontAwesomeIcon className=\"icon\" icon={faAngleDown} /></button>\n        <div className=\"tab-dropdown\">ddddd ddddd dd dd</div>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <section className=\"widget--block equipment\">\n          <div className=\"header--block\">\n            <ul className=\"breadcrumbs--block\">\n              <li><a className=\"breadcrumbs__link\" href=\"#\">My Equipment</a></li>\n              <FontAwesomeIcon className=\"icon\" icon={faAngleRight} />\n              <li><a className=\"breadcrumbs__link\" href=\"#\">Unplanned Service</a></li>\n            </ul>\n            <button className=\"button button_theme-main\">Create service request <FontAwesomeIcon className=\"icon\" icon={faPlus} /></button>\n          </div>\n          <div className=\"requests\">\n            <div className=\"requests__item open-requests\">\n              <Requests />\n            </div>\n            <div className=\"requests__item close-requests\">\n              <Requests />\n            </div>\n          </div>\n          <div className=\"right--block\">\n            <button className=\"button button_theme-link\">Track service <FontAwesomeIcon className=\"icon\" icon={faAngleRight} /></button>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import { ArcGauge } from '@progress/kendo-react-gauges';\nimport * as serviceWorker from './serviceWorker';\n\n// class ArcGaugeComponent extends React.Component {\n//   constructor(props) {\n//       super(props);\n\n//       this.state = {\n//           value: 56\n//       };\n//   }\n\n//   render() {\n//       const colors = [\n//           { from: 0, to: 100, color: '#d0021b' }\n//       ];\n\n//       const arcOptions = {\n//           value: this.state.value,\n//           colors\n//       };\n\n//       const arcCenterRenderer = (value, color) => {\n//           return (<h3 style={{ color: color }}>{value}</h3>);\n//       };\n\n//       return (\n//           <ArcGauge {...arcOptions} arcCenterRender={arcCenterRenderer} />\n//       );\n//   }\n// }\n\n// ReactDOM.render(\n//   <ArcGaugeComponent />,\n//   document.querySelector('graph-gauge')\n// );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}